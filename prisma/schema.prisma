generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String?  @unique @db.VarChar(50)
  password  String?  @db.VarChar(255)
  roleId    Int      @db.Int
  createdAt DateTime @default(now()) @db.DateTime2
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime2
  role      Role?    @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@index([roleId])
}

model Role {
  id        Int      @id @default(autoincrement())
  type      String?  @unique @db.VarChar(50)
  createdAt DateTime @default(now()) @db.DateTime2
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime2
  users     User[]
}

model Subject {
  id             String          @id @db.VarChar(20)
  name           String?         @db.VarChar(100)
  description    String?         @db.VarChar(255)
  createdAt      DateTime        @default(now()) @db.DateTime2
  updatedAt      DateTime        @default(now()) @updatedAt @db.DateTime2
  courseTeachers CourseTeacher[]
  grades         Grade[]
}

model Student {
  id                Int                @id @default(autoincrement())
  dni               String?            @db.VarChar(15)
  firstName         String?            @db.VarChar(50)
  lastName          String?            @db.VarChar(50)
  gender            String?
  address           String?            @db.VarChar(255)
  dateOfBirth       DateTime?          @db.DateTime2
  representativeId  Int?               @db.Int
  courseId          String?            @db.VarChar(20)
  academicYearId    String?            @db.VarChar(20)
  createdAt         DateTime           @default(now()) @db.DateTime2
  updatedAt         DateTime           @default(now()) @updatedAt @db.DateTime2
  representative    Representative?    @relation(fields: [representativeId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  course            Course?            @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  grades            Grade[]
  disciplineRecords DisciplineRecord[]
  academicYear      AcademicYear?      @relation(fields: [academicYearId], references: [id])

  @@index([representativeId])
}

model Period {
  id                Int                @id @default(autoincrement())
  sortOrder         String?            @db.VarChar(50)
  name              String?            @db.VarChar(50)
  label             String?            @db.VarChar(50)
  typePeriodId      String             @db.VarChar(20)
  academicYearId    String?            @db.VarChar(20)
  formula           String?            @db.VarChar(255)
  isRelevant        Boolean            @default(false)
  createdAt         DateTime           @default(now()) @db.DateTime2
  updatedAt         DateTime           @default(now()) @updatedAt @db.DateTime2
  typePeriod        TypePeriod?        @relation(fields: [typePeriodId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  academicYear      AcademicYear?      @relation(fields: [academicYearId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  grades            Grade[]
  disciplineRecords DisciplineRecord[]

  @@index([typePeriodId])
}

model TypePeriod {
  id        String   @id @db.VarChar(20)
  type      String?  @unique @db.VarChar(100)
  createdAt DateTime @default(now()) @db.DateTime2
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime2
  periods   Period[]
}

model Representative {
  id           Int       @id @default(autoincrement())
  dni          String?   @unique @db.VarChar(15)
  name         String?   @db.VarChar(50)
  lastName     String?   @db.VarChar(50)
  email        String?   @unique @db.VarChar(100)
  workPlace    String?   @db.VarChar(200)
  workstation  String?   @db.VarChar(200)
  phone1       String?   @db.VarChar(15)
  phone2       String?   @db.VarChar(15)
  address      String?   @db.VarChar(255)
  relationship String?   @db.VarChar(100)
  createdAt    DateTime  @default(now()) @db.DateTime2
  updatedAt    DateTime  @default(now()) @updatedAt @db.DateTime2
  students     Student[]

  @@index([dni])
  @@index([email])
}

model Course {
  id             String          @id @db.VarChar(20)
  name           String?         @db.VarChar(100)
  createdAt      DateTime        @default(now()) @db.DateTime2
  updatedAt      DateTime        @default(now()) @updatedAt @db.DateTime2
  student        Student[]
  courseTeachers CourseTeacher[]
}

model Teacher {
  id             Int             @id @default(autoincrement())
  dni            String?         @unique @db.VarChar(15)
  firstName      String?         @db.VarChar(50)
  lastName       String?         @db.VarChar(50)
  email          String?         @unique @db.VarChar(100)
  phone          String?         @db.VarChar(15)
  createdAt      DateTime        @default(now()) @db.DateTime2
  updatedAt      DateTime        @default(now()) @updatedAt @db.DateTime2
  courseTeachers CourseTeacher[]

  @@index([email])
  @@index([dni])
}

model CourseTeacher {
  teacherId      Int           @db.Int
  subjectId      String        @db.VarChar(20)
  courseId       String        @db.VarChar(20)
  academicYearId String        @db.VarChar(20)
  createdAt      DateTime      @default(now()) @db.DateTime2
  updatedAt      DateTime      @default(now()) @updatedAt @db.DateTime2
  teacher        Teacher?      @relation(fields: [teacherId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  subject        Subject?      @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  course         Course?       @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  academicYear   AcademicYear? @relation(fields: [academicYearId], references: [id])

  @@id([subjectId, teacherId, courseId, academicYearId])
}

model Grade {
  id        Int      @id @default(autoincrement())
  studentId Int      @db.Int
  subjectId String?  @db.VarChar(20)
  periodId  Int?     @db.Int
  score     Decimal? @db.Decimal(5, 2)
  createdAt DateTime @default(now()) @db.DateTime2
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime2
  student   Student? @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  subject   Subject? @relation(fields: [subjectId], references: [id], onDelete: NoAction, onUpdate: Cascade)
  period    Period?  @relation(fields: [periodId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([studentId, subjectId, periodId])
}

model DisciplineRecord {
  id          Int      @id @default(autoincrement())
  studentId   Int      @db.Int
  periodId    Int      @db.Int
  observation String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.DateTime2
  updatedAt   DateTime @default(now()) @updatedAt @db.DateTime2
  student     Student? @relation(fields: [studentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  period      Period?  @relation(fields: [periodId], references: [id], onDelete: NoAction, onUpdate: Cascade)

  @@index([studentId, periodId])
}

model AcademicYear {
  id             String          @id @db.VarChar(20)
  name           String          @unique @db.VarChar(50)
  startDate      DateTime        @db.DateTime2
  endDate        DateTime        @db.DateTime2
  createdAt      DateTime        @default(now()) @db.DateTime2
  updatedAt      DateTime        @default(now()) @updatedAt @db.DateTime2
  periods        Period[]
  courseTeachers CourseTeacher[]
  students       Student[]
}
